-- =====================================================
-- FoodPlus POS System - Base Schema Migration
-- =====================================================

-- Create stores table
CREATE TABLE stores (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(200) NOT NULL,
    code VARCHAR(50) UNIQUE NOT NULL,
    address VARCHAR(255),
    city VARCHAR(100),
    phone VARCHAR(20),
    email VARCHAR(255),
    tax_number VARCHAR(50),
    active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Create user_roles enum
CREATE TYPE user_role AS ENUM ('CASHIER', 'SUPERVISOR', 'MANAGER', 'ADMIN', 'INVENTORY_MANAGER');

-- Create users table
CREATE TABLE users (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    role user_role NOT NULL,
    store_id BIGINT,
    active BOOLEAN NOT NULL DEFAULT TRUE,
    phone VARCHAR(20),
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_users_store FOREIGN KEY (store_id) REFERENCES stores(id) ON DELETE SET NULL
);

-- Create terminal_types enum
CREATE TYPE terminal_type AS ENUM ('CASH_REGISTER', 'KIOSK', 'MOBILE_POS', 'SELF_CHECKOUT', 'DRIVE_THRU', 'DELIVERY_POS', 'ADMIN_TERMINAL');

-- Create terminals table
CREATE TABLE terminals (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(100) NOT NULL,
    code VARCHAR(50) UNIQUE NOT NULL,
    store_id BIGINT NOT NULL,
    type terminal_type NOT NULL DEFAULT 'CASH_REGISTER',
    active BOOLEAN NOT NULL DEFAULT TRUE,
    location VARCHAR(255),
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_terminals_store FOREIGN KEY (store_id) REFERENCES stores(id) ON DELETE CASCADE
);

-- Create categories table
CREATE TABLE categories (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(100) NOT NULL,
    description VARCHAR(255),
    code VARCHAR(50),
    parent_category_id BIGINT,
    active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_categories_parent FOREIGN KEY (parent_category_id) REFERENCES categories(id) ON DELETE SET NULL
);

-- Create taxes table
CREATE TABLE taxes (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(100) NOT NULL,
    rate DECIMAL(5,2) NOT NULL CHECK (rate >= 0 AND rate <= 100),
    description VARCHAR(255),
    active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Create product_cluster table
CREATE TABLE product_cluster (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    code VARCHAR(50) UNIQUE NOT NULL,
    name VARCHAR(100) NOT NULL,
    description VARCHAR(255)
);

-- Create products table
CREATE TABLE products (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(200) NOT NULL,
    description VARCHAR(500),
    sku VARCHAR(50) UNIQUE NOT NULL,
    barcode VARCHAR(50) UNIQUE NOT NULL,
    category_id BIGINT,
    cost_price DECIMAL(10,2) CHECK (cost_price >= 0),
    selling_price DECIMAL(10,2) NOT NULL CHECK (selling_price >= 0),
    wholesale_price DECIMAL(10,2) CHECK (wholesale_price >= 0),
    tax_id BIGINT,
    unit VARCHAR(20) NOT NULL,
    min_stock_level INTEGER CHECK (min_stock_level >= 0),
    max_stock_level INTEGER CHECK (max_stock_level >= 0),
    track_inventory BOOLEAN NOT NULL DEFAULT TRUE,
    active BOOLEAN NOT NULL DEFAULT TRUE,
    image_url VARCHAR(255),
    product_cluster_id BIGINT,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_products_category FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE SET NULL,
    CONSTRAINT fk_products_tax FOREIGN KEY (tax_id) REFERENCES taxes(id) ON DELETE SET NULL,
    CONSTRAINT fk_products_cluster FOREIGN KEY (product_cluster_id) REFERENCES product_cluster(id) ON DELETE SET NULL
);

-- Create partner_types enum
CREATE TYPE partner_type AS ENUM ('REGULAR', 'VIP', 'WHOLESALE');

-- Create loyalty_tiers enum
CREATE TYPE loyalty_tier AS ENUM ('BRONZE', 'SILVER', 'GOLD', 'PLATINUM');

-- Create partners table
CREATE TABLE partners (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    email VARCHAR(255),
    phone VARCHAR(20),
    address VARCHAR(255),
    city VARCHAR(100),
    partner_type partner_type NOT NULL DEFAULT 'REGULAR',
    loyalty_tier loyalty_tier NOT NULL DEFAULT 'BRONZE',
    loyalty_points INTEGER NOT NULL DEFAULT 0,
    active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Create inventory table
CREATE TABLE inventory (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    product_id BIGINT NOT NULL,
    store_id BIGINT NOT NULL,
    quantity INTEGER NOT NULL CHECK (quantity >= 0),
    reserved_quantity INTEGER NOT NULL DEFAULT 0 CHECK (reserved_quantity >= 0),
    last_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_inventory_product FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE,
    CONSTRAINT fk_inventory_store FOREIGN KEY (store_id) REFERENCES stores(id) ON DELETE CASCADE,
    CONSTRAINT uk_inventory_product_store UNIQUE (product_id, store_id)
);

-- Create stock_movement_types enum
CREATE TYPE stock_movement_type AS ENUM ('IN', 'OUT', 'ADJUSTMENT', 'TRANSFER', 'RETURN');

-- Create stock_movements table
CREATE TABLE stock_movements (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    product_id BIGINT NOT NULL,
    store_id BIGINT NOT NULL,
    quantity INTEGER NOT NULL,
    movement_type stock_movement_type NOT NULL,
    reference VARCHAR(100),
    performed_by BIGINT,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_stock_movements_product FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE,
    CONSTRAINT fk_stock_movements_store FOREIGN KEY (store_id) REFERENCES stores(id) ON DELETE CASCADE,
    CONSTRAINT fk_stock_movements_user FOREIGN KEY (performed_by) REFERENCES users(id) ON DELETE SET NULL
);

-- Create shift_status enum
CREATE TYPE shift_status AS ENUM ('OPEN', 'CLOSED');

-- Create shifts table
CREATE TABLE shifts (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    terminal_id BIGINT NOT NULL,
    cashier_id BIGINT NOT NULL,
    store_id BIGINT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP,
    status shift_status NOT NULL DEFAULT 'OPEN',
    opening_balance DECIMAL(12,2),
    closing_balance DECIMAL(12,2),
    opened_at TIMESTAMP,
    closed_at TIMESTAMP,
    
    CONSTRAINT fk_shifts_terminal FOREIGN KEY (terminal_id) REFERENCES terminals(id) ON DELETE CASCADE,
    CONSTRAINT fk_shifts_cashier FOREIGN KEY (cashier_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_shifts_store FOREIGN KEY (store_id) REFERENCES stores(id) ON DELETE CASCADE
);

-- Create payment_methods enum
CREATE TYPE payment_method AS ENUM ('CASH', 'CARD', 'CHECK', 'BANK_TRANSFER', 'MOBILE_PAYMENT', 'GIFT_CARD');

-- Create payment_status enum
CREATE TYPE payment_status AS ENUM ('PENDING', 'COMPLETED', 'FAILED', 'REFUNDED', 'CANCELLED');

-- Create sale_status enum
CREATE TYPE sale_status AS ENUM ('PENDING', 'COMPLETED', 'CANCELLED', 'REFUNDED');

-- Create sales table
CREATE TABLE sales (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    sale_number VARCHAR(50) UNIQUE NOT NULL,
    partner_id BIGINT,
    cashier_id BIGINT NOT NULL,
    store_id BIGINT NOT NULL,
    terminal_id BIGINT NOT NULL,
    cash_session_id UUID,
    subtotal DECIMAL(12,2) NOT NULL CHECK (subtotal >= 0),
    tax_amount DECIMAL(12,2) NOT NULL CHECK (tax_amount >= 0),
    discount_amount DECIMAL(12,2) NOT NULL DEFAULT 0 CHECK (discount_amount >= 0),
    total_amount DECIMAL(12,2) NOT NULL CHECK (total_amount >= 0),
    paid_amount DECIMAL(12,2) NOT NULL CHECK (paid_amount >= 0),
    change_amount DECIMAL(12,2) NOT NULL DEFAULT 0 CHECK (change_amount >= 0),
    payment_method payment_method,
    status sale_status NOT NULL DEFAULT 'COMPLETED',
    notes VARCHAR(500),
    loyalty_points_earned INTEGER NOT NULL DEFAULT 0,
    loyalty_points_used INTEGER NOT NULL DEFAULT 0,
    sale_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_sales_partner FOREIGN KEY (partner_id) REFERENCES partners(id) ON DELETE SET NULL,
    CONSTRAINT fk_sales_cashier FOREIGN KEY (cashier_id) REFERENCES users(id) ON DELETE RESTRICT,
    CONSTRAINT fk_sales_store FOREIGN KEY (store_id) REFERENCES stores(id) ON DELETE RESTRICT,
    CONSTRAINT fk_sales_terminal FOREIGN KEY (terminal_id) REFERENCES terminals(id) ON DELETE RESTRICT
);

-- Create payments table
CREATE TABLE payments (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    sale_id BIGINT NOT NULL,
    amount DECIMAL(12,2) NOT NULL CHECK (amount > 0),
    payment_method payment_method,
    reference VARCHAR(100),
    status payment_status NOT NULL DEFAULT 'COMPLETED',
    payment_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_payments_sale FOREIGN KEY (sale_id) REFERENCES sales(id) ON DELETE CASCADE
);

-- Create sale_items table
CREATE TABLE sale_items (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    sale_id BIGINT NOT NULL,
    product_id BIGINT NOT NULL,
    quantity INTEGER NOT NULL CHECK (quantity > 0),
    unit_price DECIMAL(10,2) NOT NULL CHECK (unit_price >= 0),
    discount DECIMAL(10,2) NOT NULL DEFAULT 0 CHECK (discount >= 0),
    total_price DECIMAL(10,2) NOT NULL CHECK (total_price >= 0),
    tax_amount DECIMAL(10,2) NOT NULL DEFAULT 0 CHECK (tax_amount >= 0),
    
    CONSTRAINT fk_sale_items_sale FOREIGN KEY (sale_id) REFERENCES sales(id) ON DELETE CASCADE,
    CONSTRAINT fk_sale_items_product FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE RESTRICT
);

-- Create indexes for better performance
CREATE INDEX idx_users_username ON users(username);
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_store ON users(store_id);
CREATE INDEX idx_users_role ON users(role);
CREATE INDEX idx_users_active ON users(active);

CREATE INDEX idx_terminals_store ON terminals(store_id);
CREATE INDEX idx_terminals_code ON terminals(code);
CREATE INDEX idx_terminals_active ON terminals(active);

CREATE INDEX idx_products_sku ON products(sku);
CREATE INDEX idx_products_barcode ON products(barcode);
CREATE INDEX idx_products_category ON products(category_id);
CREATE INDEX idx_products_active ON products(active);

CREATE INDEX idx_inventory_product ON inventory(product_id);
CREATE INDEX idx_inventory_store ON inventory(store_id);
CREATE INDEX idx_inventory_product_store ON inventory(product_id, store_id);

CREATE INDEX idx_stock_movements_product ON stock_movements(product_id);
CREATE INDEX idx_stock_movements_store ON stock_movements(store_id);
CREATE INDEX idx_stock_movements_date ON stock_movements(created_at);

CREATE INDEX idx_sales_cashier ON sales(cashier_id);
CREATE INDEX idx_sales_store ON sales(store_id);
CREATE INDEX idx_sales_terminal ON sales(terminal_id);
CREATE INDEX idx_sales_date ON sales(sale_date);
CREATE INDEX idx_sales_number ON sales(sale_number);

CREATE INDEX idx_sale_items_sale ON sale_items(sale_id);
CREATE INDEX idx_sale_items_product ON sale_items(product_id);

CREATE INDEX idx_payments_sale ON payments(sale_id);
CREATE INDEX idx_payments_date ON payments(payment_date);

CREATE INDEX idx_shifts_terminal ON shifts(terminal_id);
CREATE INDEX idx_shifts_cashier ON shifts(cashier_id);
CREATE INDEX idx_shifts_store ON shifts(store_id);
CREATE INDEX idx_shifts_status ON shifts(status);

-- Add comments
COMMENT ON TABLE stores IS 'Stores information about retail locations';
COMMENT ON TABLE users IS 'System users with different roles and permissions';
COMMENT ON TABLE terminals IS 'Point of sale terminals and devices';
COMMENT ON TABLE categories IS 'Product categories for organization';
COMMENT ON TABLE taxes IS 'Tax rates and configurations';
COMMENT ON TABLE products IS 'Products available for sale';
COMMENT ON TABLE partners IS 'Customers and business partners';
COMMENT ON TABLE inventory IS 'Product inventory levels by store';
COMMENT ON TABLE stock_movements IS 'Inventory movement tracking';
COMMENT ON TABLE sales IS 'Sales transactions';
COMMENT ON TABLE sale_items IS 'Individual items in sales';
COMMENT ON TABLE payments IS 'Payment records for sales';
COMMENT ON TABLE shifts IS 'Cashier work shifts'; 